06/02/23

Learnt and brushed topics about Github

https://learngitbranching.js.org/

1. linux basic commands(add more)

    * https://www.hostinger.com/tutorials/linux-commands

    * ls -a list files
    * ls .git
    * create file => touch file.txt
    * rm -rf file_name
    


2. Create a new repo
    ##  git init

    ##  git add .

    ##  git commit -m "message"

    ##  git branch -M main

    ##  git remote add origin url_link
    
    ##  git push -u origin main


3. Git stash 

    ## git add 
    
    ##  git stash 
    
    ##  git push origin

    ##  to bring back stash git stash pop

4. Git Upstream 

    https://www.javatpoint.com/git-upstream-and-downstream

    The term upstream and downstream refers to the repository. Generally, upstream is from where you clone the repository, and downstream is any project that integrates your work with other works. However, these terms are not restricted to Git repositories.

    * Sometimes we are trying to push some changes to the remote server, but it will show the error like "error: failed to push some refs to 'https :< remote repository Address>." There may be the reason that you have not set your remote branch. We can set the remote branch for the local branch. We will implement the following process to set the remote server:
    
    ## git remote -v 

    https://www.javatpoint.com/git-remote

    ## git push --set-upstream origin master  


5. Git Checkout
    
    * This basically means creating a new branch and commiting changes in that branch.

    * to do that

    ## git branch branch_name`
    ## git checkout branch_name

    * Now the branch is pointing to the latest commit and checking branch
    ## git branch 


6. Git merge 

    * When u work in a separate branch and you want merge in main branch then: 

    ## git merge branch_name

    * always better to work in a separate branch and then do pull request or merge.

7. More about branches

    ## Open source 

    * Fork a repo for contribution

    * Request by the option pull request 
    
    * Branches in simple languages is just a pointer to commit

    ## New Feature --> New branch --> new request


8. Removing a commit from the pull request by force pushing it
    
    * If you want to remove a commit from the pull request or delete a commmit then using git log command retrieve the git has code. 

    ## Use git reset (hash_code) 

    *  By resetting the commit will get unstaged

    ##  Alternatively, using  (git add .) then git stash it will be gone

    ##  You check this in log #git log

    * now online repo has something extra that ur local repo doesn't so you need force push it.

    ##  git origin branch_name - f


9. Merging a pull request   
    * This technically means that you request for changes made in local branch to merge in upstream master branch 
    da

    * Just accept the merge request and vola! it is merged!
 

10. Making forked project even with main project

    *  You encounter this when a person requests a pull request and it get merged in the upstream repo. 

    * To view the commits in local repo either you can select fetch upstream  to view in main (master) branch or 
    (own fork and upstream repo is always maintained)
            
    ## git checkout main branch
            
    ##  type git fetch --all --prune

    ##  git reset --hard upstream/main
           
    ##  U can check it using git log

    ##  git push origin master (to reflect in online repo)

    ##  or in one line which is #git pull upstream# main make sure you checkout the main branch.

    ##  then make sure u push it to onine repo


11. Squashing commits

    * git log indicates which all commits that u want squash into single commit

    ##  git rebase -i commit has code till the one u want merge the commits

    *  select the commit u want to squash in the env and merge them with a message

    ##   create a message by pressing :x  and quit the env by pressing esc and :wq

    ##  If u want the commits from the log then, ##git reset --hard commit hash_code should be cautious with this code.


12. Merge conflicts and how to resolve them?

    * Person A performs a pull request and then person B makes the changes using the commit method.

    * The author of the repo can manual override it and resolve it.


13. Setting up tracking Remote-tracking Branch:

They are used to link what you are working on locally, with that on the remote.
They know which remote branch to grab changes from when git pull or git fetch is executed. Typing git status will state how many commits ahead you are of the remote branch.

    ##  git branch --set-upstream-to=origin/main
    ## git branch -r
    ## git branch --set-upstream-to=origin/<branch-name> (for setting up the upstream)

    ## git pull origin main


14. Local repository has the correct remote set

    ## git remote -v

15. Deleting a commit id from the branch

    a. Replace n with the number of commits you want to go back. For example, if you want to modify the last 5 commits:

    ## git rebase -i HEAD~n

    How to use the shell ?
    After resolving

    ## git push origin main --force


    b. Reset option

    ## git reset --hard abc123^

    c. Undo the changes made by a specific commit but still keep a record of the commit in history, you can use git revert

    ## git revert


16. Removing rebase files (powershell)

    ## Remove-Item -Recurse -Force .git\rebase-merge

17. Git editor change

    ## git config --global core.editor "notepad"

18. Fatal: refusing to merge unrelated histories
means that the main and master branches have different root commits, and Git is refusing to merge them because their histories do not overlap.

    a. Merge branches
    
    ## git merge feature-branch
    ## git merge master --allow-unrelated-histories


    ## git add <conflicted-file>

    ## git push origin main

    Note: Always Pull Latest Changes Before Merging

    ## git pull origin main


Merging	
Combines the history of both branches	
Creates a merge commit
Keeps both branches' histories intact
Easier to track branch merges


Rebasing
Rewrites the history to appear linear
No merge commit is created
Makes it look like master started from main
Cleaner and more linear history

(merging)
A --- B --- C --- M
               /   \
            D --- E --- F 

rebasing 
A --- B --- C --- D --- E --- F



19. Now I manually added a submodule into main folder | I dont want the git in submodule | Added in main folder the submodule |


a. navigate to sub module 

## cd submodule

## rm -rf .git

## git add | commit | push



20. Merging  2 repositories into MAIN

    ## mkdir common_repo
    ## cd
    ## git init
    
    ( if pushed to github)
    ## git remote add repo1 <url of repo1>
    ## git remote add repo2 <url of repo2>

    ## git fetch repo1
    ## git fetch repo2

    ## git checkout repo1/main
    ## git checkout -b repo1-branch
    ## mkdir repo1
    ## git mv * repo1/
    ## git commit -m


    ## git checkout repo2/main
    ## git checkout -b repo2-branch
    ## mkdir repo2
    ## git mv * repo2/
    ## git commit -m
    

    ## git remote add origin <url_of_common_repo>
    ## git push origin repo1-branch
    ## git push origin repo2-branch


    #### AUTOMATIC WAY #### of merging 

    git remote add repo1 <url>
    git fetch repo1
    git subtree add --prefix=repo1 repo1/main --squash
    

    git remote add repo2 <url>
    git fetch repo2
    git subtree add --prefix=repo2 repo2/main --squash

    git remote add origin <url>
    git push origin main



   #### MAIN and other BRANCH totally different history
   - git fetch origin
   - git checkout -b other branch origin/main
   - git commit, add and push

   ### ALTERNATE WAY
   - git checkout master
   - git rebase origin/main  # brings in remote history before branching
   - git checkout -b feature/profile-icon   
   - git push origin feature/profile-icon

### Removing GIT intialization on windows powershell
   - Remove-Item -Recurse -Force .git

### Cherry PICK to put the old code to share same HISTORY as main
   - git checkout
   - git pull origin main
   - git checkout -b other-branch
   - git cherry-pick <commit_old_feature>
   - git push -u origin branch
   
## DELETE a branch locallu and remote
   - git branch -d feature/profile-icon   -local
   - git push origin --delete feature/profile-icon -remote

#########################################################################################################################################################################






